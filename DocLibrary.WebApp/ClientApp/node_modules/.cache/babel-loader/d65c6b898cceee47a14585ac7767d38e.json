{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ekrem.yurtman\\\\source\\\\repos\\\\DocLibrary\\\\DocLibrary.WebApp\\\\ClientApp\\\\src\\\\components\\\\AddDocument.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AddDocument extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      files: ''\n    };\n\n    this.uploadFileHandler = event => {\n      this.setState({\n        files: event.target.files\n      });\n    };\n  }\n\n  fileSubmitHandler(event) {\n    event.preventDefault();\n    const formData = new FormData();\n\n    for (let i = 0; i < files.length; i++) {\n      formData.append('files', files[i]);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      body: formData\n    };\n    fetch('document/upload', requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      alert(data.message);\n    }).catch(error => {\n      console.error('Error while uploading file!', error);\n      alert('ERROR!');\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: fileSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: uploadFileHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nAddDocument.displayName = AddDocument.name;","map":{"version":3,"sources":["C:/Users/ekrem.yurtman/source/repos/DocLibrary/DocLibrary.WebApp/ClientApp/src/components/AddDocument.js"],"names":["React","Component","AddDocument","state","files","uploadFileHandler","event","setState","target","fileSubmitHandler","preventDefault","formData","FormData","i","length","append","requestOptions","method","body","fetch","then","response","isJson","headers","get","includes","data","json","ok","error","message","status","Promise","reject","alert","catch","console","render","displayName","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAGvCE,KAHuC,GAG/B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAH+B;;AAAA,SAKvCC,iBALuC,GAKnBC,KAAK,IAAI;AACzB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAEE,KAAK,CAACE,MAAN,CAAaJ;AAAtB,OAAd;AACH,KAPsC;AAAA;;AASvCK,EAAAA,iBAAiB,CAACH,KAAD,EAAQ;AACrBA,IAAAA,KAAK,CAACI,cAAN;AAEA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCF,MAAAA,QAAQ,CAACI,MAAT,CAAgB,OAAhB,EAAyBX,KAAK,CAACS,CAAD,CAA9B;AACH;;AAED,UAAMG,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,IAAI,EAAEP;AAFa,KAAvB;AAIAQ,IAAAA,KAAK,CAAC,iBAAD,EAAoBH,cAApB,CAAL,CACKI,IADL,CACU,MAAMC,QAAN,IAAkB;AAAA;;AACpB,YAAMC,MAAM,4BAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAH,0DAAG,sBAAsCC,QAAtC,CAA+C,kBAA/C,CAAf;AACA,YAAMC,IAAI,GAAGJ,MAAM,KAAI,MAAMD,QAAQ,CAACM,IAAT,EAAV,CAAnB,CAFoB,CAIpB;;AACA,UAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AACd;AACA,cAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BT,QAAQ,CAACU,MAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAEDK,MAAAA,KAAK,CAACR,IAAI,CAACI,OAAN,CAAL;AACH,KAbL,EAcKK,KAdL,CAcWN,KAAK,IAAI;AACZO,MAAAA,OAAO,CAACP,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACAK,MAAAA,KAAK,CAAC,QAAD,CAAL;AACH,KAjBL;AAkBH;;AAEDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAE5B,iBAAhB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,MAA3B;AAA4B,QAAA,QAAQ,EAAEJ;AAAtC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAjDsC;AAA9BH,W,CACFoC,W,GAAcpC,WAAW,CAACqC,I","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class AddDocument extends Component {\r\n    static displayName = AddDocument.name;\r\n\r\n    state = { files: '' };\r\n\r\n    uploadFileHandler = event => {\r\n        this.setState({ files: event.target.files })\r\n    }\r\n\r\n    fileSubmitHandler(event) {\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData();\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            formData.append('files', files[i])\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            body: formData\r\n        };\r\n        fetch('document/upload', requestOptions)\r\n            .then(async response => {\r\n                const isJson = response.headers.get('content-type')?.includes('application/json');\r\n                const data = isJson && await response.json();\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message\r\n                    const error = (data && data.message) || response.status;\r\n                    return Promise.reject(error);\r\n                }\r\n\r\n                alert(data.message);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error while uploading file!', error);\r\n                alert('ERROR!');\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={fileSubmitHandler}>\r\n                <input type='file' multiple onChange={uploadFileHandler} />\r\n                <button type='submit'>Upload</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}